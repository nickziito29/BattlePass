# =======================================================
# CONFIGURAÇÃO CENTRAL DA APLICAÇÃO BATTLEPASS
# =======================================================

spring:
  # -------------------------------------------------------
  # DATA SOURCE (Conexão com o Banco de Dados PostgreSQL)
  # -------------------------------------------------------
  datasource:
    url: jdbc:postgresql://db:5432/battlepassdb
    username: admin
    password: admin
    driver-class-name: org.postgresql.Driver

  # -------------------------------------------------------
  # JPA / HIBERNATE (Mapeamento Objeto-Relacional)
  # -------------------------------------------------------
  jpa:
    hibernate:
      # Em desenvolvimento, 'update' é conveniente. Em produção, use 'validate' ou 'none'.
      ddl-auto: update
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    # Mostra os comandos SQL gerados no console. Ótimo para debug.
    show-sql: true

  # -------------------------------------------------------
  # FLYWAY (Gerenciador de Migrações do Banco de Dados)
  # -------------------------------------------------------
  flyway:
    enabled: true
    # Local onde os scripts de migração (V1__, V2__, etc.) são armazenados.
    locations: classpath:db/migration
    # Reutiliza as configurações do datasource para não repetir informação.
    url: ${spring.datasource.url}
    user: ${spring.datasource.username}
    password: ${spring.datasource.password}
    baseline-on-migrate: true
    schemas: battlepassdb

  # -------------------------------------------------------
  # SECURITY (Configurações do Spring Security e OAuth2)
  # -------------------------------------------------------
  security:
    oauth2:
      client:
        registration:
          google:
            # ATENÇÃO: Estes valores devem ser obtidos no seu Google Cloud Console.
            # É uma boa prática configurá-los via variáveis de ambiente em produção.
            client-id: 980679245935-ds7s7oi74lgsmjtp4hpb1jj5umgo6il3.apps.googleusercontent.com
            client-secret: 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
            # 'scope' em formato de lista YAML, que é mais limpo.
            scope:
              - openid
              - profile
              - email
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub

  # -------------------------------------------------------
  # MAIL (Configuração para envio de e-mails) - NOVO!
  # -------------------------------------------------------
  mail:
    # Exemplo com Mailtrap.io, ideal para desenvolvimento.
    # Substitua com as credenciais do seu provedor de e-mail (Gmail, SendGrid, etc).
    host: smtp.mailtrap.io
    port: 2525
    ssl: no
    tls: yes
    username: "5a066c2d3f4762"
    password: "918194698cf6f0"
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# =======================================================
# PROPRIEDADES CUSTOMIZADAS DA APLICAÇÃO
# =======================================================

# -------------------------------------------------------
# JWT (Configuração do JSON Web Token)
# -------------------------------------------------------
jwt:
  # Em produção, este valor DEVE ser lido de uma variável de ambiente.
  secret: "7f5d72a9a6b3c8e9f0d1b4a7c8e5f2a3b4c6d8e0f1a2b3c4d5e6f7a8b9c0d1e2"

# -------------------------------------------------------
# OAUTH2 (URLs de Redirecionamento para o Frontend)
# -------------------------------------------------------
oauth2:
  redirect:
    success:
      url: http://localhost:5173/login-success
    failure:
      url: http://localhost:5173/auth?error=oauth_failed